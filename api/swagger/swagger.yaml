---
swagger: "2.0"
info:
  description: |
    This is homework task for Node.js mentoring program
    at EPAM Systems
  version: 1.0.0
  title: Swagger Node_tr
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:8080
basePath: /
tags:
- name: cities
  description: Manipulate a list of cities
- name: products
  description: Access to product list
- name: users
  description: Operations about user
schemes:
- https
- http
paths:
  /api/cities/random:
    get:
      tags:
      - cities
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cityId
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/City'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - api_key: []
  /api/cities:
    get:
      tags:
      - cities
      summary: Finds city by Id
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
      - application/json
      - application/xml
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - pending
          - sold
          default: available
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/City'
        400:
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    post:
      tags:
      - cities
      summary: Add a new city to the list
      operationId: addCity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: City object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /api/cities/{cityId}:
    put:
      tags:
      - cities
      summary: Update an existing pet
      operationId: updatePet
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cityId
        in: path
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Pet object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - cities
      summary: Deletes a pet
      operationId: deletePet
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: cityId
        in: path
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /api/products:
    get:
      tags:
      - products
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
      - api_key: []
    post:
      tags:
      - products
      summary: Place an order for a pet
      operationId: placeOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: order placed for purchasing the pet
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Invalid Order
  /api/products/{productId}:
    get:
      tags:
      - products
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: getOrderById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: productId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        maximum: 10.0
        minimum: 1
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/City'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
      - products
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - name: productId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /api/products/{orderId}/reviews:
    get:
      tags:
      - products
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: getOrderByIdgg
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        maximum: 10.0
        minimum: 1
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Review'
        400:
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/ApiResponse'
        404:
          description: Order not found
          schema:
            $ref: '#/definitions/ApiResponse'
  /api/users:
    get:
      tags:
      - users
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
  /api/user/{userId}:
    delete:
      tags:
      - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  City:
    type: object
    properties:
      id:
        type: integer
        description: DB provided ID
      name:
        type: string
        description: Name of the city
      country:
        type: string
        description: Name of the country the city is located in
      capital:
        type: boolean
        description: Shows whether the city is a capital of the country
      latitude:
        type: number
        description: Shows the geographic latitude of the city
      longitude:
        type: number
        description: Shows the geographic longitude of the city
      timezone:
        type: string
        description: Shows the timezone of the city
    xml:
      name: City
    example:
      country: country
      capital: true
      timezone: timezone
      latitude: 6.02745618307040320615897144307382404804229736328125
      name: name
      id: 0
      longitude: 1.46581298050294517310021547018550336360931396484375
  Product:
    type: object
    properties:
      id:
        type: integer
        description: DB provided ID
      name:
        type: string
        description: Name of the product
      price:
        type: number
        description: Price of the product
    xml:
      name: Tag
    example:
      price: 6.02745618307040320615897144307382404804229736328125
      name: name
      id: 0
  Review:
    type: object
    properties:
      id:
        type: integer
        description: DB provided ID
      name:
        type: string
      reviews:
        type: array
        items:
          type: string
          description: User provided product feedback
    xml:
      name: Review
    example:
      reviews:
      - reviews
      - reviews
      name: name
      id: 0
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      password:
        type: string
      email:
        type: string
    xml:
      name: User
    example:
      password: password
      last_name: last_name
      id: 0
      first_name: first_name
      email: email
      username: username
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
