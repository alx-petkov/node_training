---
swagger: "2.0"
info:
  description: |
    This is homework task for Node.js mentoring program
    at EPAM Systems
  version: 1.0.0
  title: Swagger Node_tr
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /Node_mentoring_pr/Node_tr/1.0.0
tags:
- name: cities
  description: Manipulate a list of cities
- name: products
  description: Access to product list
- name: users
  description: Operations about user
schemes:
- https
- http
paths:
  /api/cities/random:
    get:
      tags:
      - cities
      summary: Get random city from  list
      description: Returns a single city
      operationId: getRandomCity
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/City'
  /api/cities:
    get:
      tags:
      - cities
      summary: Returns all cities currently in the list
      description: Returns multiple city items
      operationId: getAllCities
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/City'
    post:
      tags:
      - cities
      summary: Add a new city to the list
      operationId: addCity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: City object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/City'
        405:
          description: Invalid input
  /api/cities/{cityId}:
    put:
      tags:
      - cities
      summary: Update an existing city
      operationId: updateCity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: cityId
        in: path
        description: ID of the city to be edited
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Prperties of the city that need to be updated
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/City'
        404:
          description: City not found
        405:
          description: Invalid input
    delete:
      tags:
      - cities
      summary: Deletes a city from the list
      operationId: deleteCity
      produces:
      - application/json
      parameters:
      - name: cityId
        in: path
        description: ID of the city to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Item removed
        404:
          description: City not found
  /api/products:
    get:
      tags:
      - products
      summary: Returns full list of avaliable products
      description: Returns all products in DB
      operationId: getProducts
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
    post:
      tags:
      - products
      summary: Insert new roduct in the list
      operationId: addProduct
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Add new product with name and price
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Invalid operation
        405:
          description: Invalid input
  /api/products/{productId}:
    get:
      tags:
      - products
      summary: Find specific product from the list
      description: Get single product from the list
      operationId: getProductById
      produces:
      - application/json
      parameters:
      - name: productId
        in: path
        description: ID of product that needs to be fetched
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Product not found
    delete:
      tags:
      - products
      summary: Delete product by ID
      description: Remove product from list by its ID
      operationId: deleteProduct
      produces:
      - application/json
      parameters:
      - name: productId
        in: path
        description: ID of the product that needs to be deleted
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Item removed
        404:
          description: Product not found
  /api/products/{productId}/reviews:
    get:
      tags:
      - products
      summary: Find user reviews for specific product
      description: Find user feedback for a product
      operationId: getOrderByIdgg
      produces:
      - application/json
      parameters:
      - name: productId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Review'
        400:
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/ApiResponse'
        404:
          description: Product not found
  /api/users:
    get:
      tags:
      - users
      summary: Get all users in list
      operationId: getUsers
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /api/user/{userId}:
    delete:
      tags:
      - users
      summary: Delete user
      description: Removing user from list.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The ID of the user that needs to be deleted
        required: true
        type: string
      responses:
        200:
          description: Item removed
        404:
          description: User not found
definitions:
  City:
    type: object
    properties:
      id:
        type: integer
        description: DB provided ID
      name:
        type: string
        description: Name of the city
      country:
        type: string
        description: Name of the country the city is located in
      capital:
        type: boolean
        description: Shows whether the city is a capital of the country
      latitude:
        type: number
        description: Shows the geographic latitude of the city
      longitude:
        type: number
        description: Shows the geographic longitude of the city
      timezone:
        type: string
        description: Shows the timezone of the city
    xml:
      name: City
    example:
      country: country
      capital: true
      timezone: timezone
      latitude: 6.02745618307040320615897144307382404804229736328125
      name: name
      id: 0
      longitude: 1.46581298050294517310021547018550336360931396484375
  Product:
    type: object
    properties:
      id:
        type: integer
        description: DB provided ID
      name:
        type: string
        description: Name of the product
      price:
        type: number
        description: Price of the product
    xml:
      name: Tag
    example:
      price: 6.02745618307040320615897144307382404804229736328125
      name: name
      id: 0
  Review:
    type: object
    properties:
      id:
        type: integer
        description: DB provided ID
      name:
        type: string
      reviews:
        type: array
        items:
          type: string
          description: User provided product feedback
    xml:
      name: Review
    example:
      reviews:
      - reviews
      - reviews
      name: name
      id: 0
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      password:
        type: string
      email:
        type: string
    xml:
      name: User
    example:
      password: password
      last_name: last_name
      id: 0
      first_name: first_name
      email: email
      username: username
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
